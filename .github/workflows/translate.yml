name: Translate Repository Content (Production)

on:
  workflow_dispatch:
    inputs:
      repository_url:
        description: "翻訳対象のリポジトリ URL"
        required: true
        default: "https://github.com/microsoft/agent-framework"
        type: string
      subdirectory:
        description: "対象がモノレポの場合のサブディレクトリパス"
        required: false
        default: "python"
        type: string
      translation_limit:
        description: "翻訳件数の上限 (0で無制限)"
        required: false
        default: 10
        type: number
      mock_mode:
        description: "モックモードで実行（LLM呼び出しをスキップ）"
        required: false
        default: false
        type: boolean
      no_fallback:
        description: "Fallback無効化（トークン超過時にAzure Fallbackしない）"
        required: false
        default: false
        type: boolean
      include_log_messages:
        description: "logger/printも抽出対象に含める"
        required: false
        default: false
        type: boolean
      exclude_terms:
        description: "和訳から除外する単語群（自然言語で指定）"
        required: false
        default: ""
        type: string
      push_results:
        description: "翻訳結果をリポジトリにpushする"
        required: false
        default: true
        type: boolean

jobs:
  prepare:
    name: Extract And Summarize
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      token-summary: ${{ steps.summary.outputs.json }}
    steps:
      - name: Checkout comment-translator repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: uv sync --frozen

      - name: Clone target repository
        run: |
          # 外部リポジトリをクローン（読み取り専用）
          git clone --depth 1 "${{ inputs.repository_url }}" target-repo

          if [ -n "${{ inputs.subdirectory }}" ]; then
            case "${{ inputs.subdirectory }}" in
              /*|*../*)
                echo "Invalid subdirectory: ${{ inputs.subdirectory }}" >&2
                exit 1
                ;;
            esac
          fi

      - name: Extract docstrings and comments
        run: |
          mkdir -p results
          ARGS=""
          if [[ "${{ inputs.include_log_messages }}" == 'true' ]]; then
            ARGS="${ARGS} --include-log-messages"
          fi
          uv run python main.py extract target-repo/${{ inputs.subdirectory }} \
            --output results/extracted.jsonl \
            $ARGS \
            --log-level INFO

      - name: Summarize token usage
        id: summary
        run: |
          # translation_limitが0の場合は--limitオプションを付けない
          LIMIT_ARG=""
          if [ "${{ inputs.translation_limit }}" -gt 0 ]; then
            LIMIT_ARG="--limit ${{ inputs.translation_limit }}"
          fi

          uv run python scripts/summarize_tokens.py \
            --input results/extracted.jsonl \
            --output results/token-summary.json \
            $LIMIT_ARG

          # GitHub Outputに保存（JSONを1行に圧縮）
          SUMMARY=$(jq -c '.' results/token-summary.json)
          echo "json=$SUMMARY" >> "$GITHUB_OUTPUT"

          # Step Summaryに詳細表示
          ITEMS=$(jq '.items // (.items | length?)' results/token-summary.json)
          TOKENS=$(jq '.tokens' results/token-summary.json)
          AVG_TOKENS=$(jq '.average_tokens' results/token-summary.json)
          MAX_TOKENS=$(jq '.max_tokens // 0' results/token-summary.json)
          MIN_TOKENS=$(jq '.min_tokens // 0' results/token-summary.json)
          TOTAL_ITEMS=$(jq '.total_items // .items' results/token-summary.json)
          LIMIT=$(jq '.translation_limit // 0' results/token-summary.json)

          # 制限がある場合の表示
          if [ "$LIMIT" != "null" ] && [ "$LIMIT" -gt 0 ]; then
            ITEMS_DISPLAY="${ITEMS}件 (全${TOTAL_ITEMS}件中)"
          else
            ITEMS_DISPLAY="${ITEMS}件"
          fi

          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          ## 📊 トークン使用量サマリ

          | 項目 | 値 |
          |------|------|
          | 抽出件数 | **${ITEMS_DISPLAY}** |
          | 総トークン数 | **${TOKENS}** |
          | 平均トークン数 | **${AVG_TOKENS}** |
          | 最大トークン数 | ${MAX_TOKENS} |
          | 最小トークン数 | ${MIN_TOKENS} |

          > ⚠️ 次のステップで翻訳を実行します。承認が必要です。
          EOF

          # コンソールにも表示
          echo "============================================"
          echo "📊 トークン使用量サマリ"
          echo "============================================"
          echo "抽出件数: ${ITEMS_DISPLAY}"
          echo "総トークン数: ${TOKENS}"
          echo "平均トークン数: ${AVG_TOKENS}"
          echo "最大トークン数: ${MAX_TOKENS}"
          echo "最小トークン数: ${MIN_TOKENS}"
          echo "============================================"

      - name: Upload extraction artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prepare-artifacts
          path: |
            results/extracted.jsonl
            results/token-summary.json

  translate:
    name: Translate And Apply
    runs-on: ubuntu-latest
    needs: prepare
    environment: translation-approval
    permissions:
      contents: write # 翻訳結果をpushするため
    steps:
      - name: Checkout comment-translator repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: uv sync --frozen

      - name: Clone target repository
        run: |
          # 外部リポジトリをクローン（読み取り専用）
          git clone --depth 1 "${{ inputs.repository_url }}" target-repo

      - name: Download extraction artifact
        uses: actions/download-artifact@v4
        with:
          name: prepare-artifacts
          path: results

      - name: Show token summary
        run: |
          echo "============================================"
          echo "📊 翻訳前のトークン確認"
          echo "============================================"
          cat results/token-summary.json | jq -r '
            "抽出件数: \(.items // (.items | length?))件",
            "総トークン数: \(.tokens)",
            "平均トークン数: \(.average_tokens)",
            "最大トークン数: \(.max_tokens // 0)",
            "最小トークン数: \(.min_tokens // 0)"
          '
          echo "============================================"
          echo ""
          echo "⚠️  このジョブは environment: translation-approval で保護されています"
          echo "⚠️  翻訳を実行するには GitHub UI で承認が必要です"
          echo ""

      - name: Run translation
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_MODELS_ENDPOINT: ${{ secrets.GH_MODELS_ENDPOINT }}
          AZURE_INFERENCE_ENDPOINT: ${{ secrets.AZURE_INFERENCE_ENDPOINT }}
          AZURE_INFERENCE_CREDENTIAL: ${{ secrets.AZURE_INFERENCE_CREDENTIAL }}
          AZURE_INFERENCE_MODEL: ${{ secrets.AZURE_INFERENCE_MODEL }}
          API_VERSION: ${{ secrets.API_VERSION }}
        run: |
          TRANSLATE_ARGS=()
          if [ "${{ inputs.translation_limit }}" != "0" ]; then
              TRANSLATE_ARGS+=("--limit" "${{ inputs.translation_limit }}")
          fi
          if [ -n "${{ inputs.exclude_terms }}" ]; then
              TRANSLATE_ARGS+=("--exclude-terms" "${{ inputs.exclude_terms }}")
          fi
          if [[ "${{ inputs.mock_mode }}" == 'true' ]]; then
              TRANSLATE_ARGS+=("--mock")
          fi
          if [[ "${{ inputs.no_fallback }}" == 'true' ]]; then
              TRANSLATE_ARGS+=("--no-fallback")
          fi
          uv run python main.py translate results/extracted.jsonl \
            --output results/translated.jsonl \
            --failed-output results/unprocessed.jsonl \
            "${TRANSLATE_ARGS[@]}" \
            --log-level INFO

      - name: Apply translated content
        run: |
          # まずtarget-repo全体をresults/artifactsにコピー（元の構造を保持）
          echo "============================================"
          echo "📂 target-repo/${{ inputs.subdirectory }} を results/artifacts にコピー..."

          mkdir -p results/artifacts
          rsync -av target-repo/${{ inputs.subdirectory }}/ results/artifacts/

          echo "✅ 元のファイル構造をコピー完了"
          echo "============================================"

          # 翻訳済みファイルで上書き
          echo "� 翻訳済みファイルを適用中..."
          uv run python main.py replace results/translated.jsonl \
            --output-dir results/artifacts \
            --root target-repo/${{ inputs.subdirectory }} \
            --log-level INFO

          echo "✅ 翻訳適用完了（翻訳済みファイルは上書き、未翻訳ファイルは元のまま）"
          echo "============================================"

      - name: Upload translation artifacts
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: translation-results
          path: results

      - name: Commit and push results (GitHub only)
        if: ${{ !env.ACT && inputs.push_results }}
        run: |
          # Git設定
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # デバッグ情報
          echo "============================================"
          echo "📂 results/ の内容:"
          ls -lah results/
          echo "============================================"
          echo "📂 results/artifacts の構造:"
          tree -L 2 results/artifacts || find results/artifacts -type d | head -20
          echo "============================================"

          # results/ 全体をステージング
          echo "📦 results/ ディレクトリをステージング中..."
          git add results/

          # 変更内容を表示
          echo "📝 変更されたファイル:"
          git diff --staged --name-only || echo "変更なし"
          echo "📝 変更されたファイルの詳細（最初の10件）:"
          git diff --staged --stat | head -11
          echo "============================================"

          # 変更があればコミット
          if git diff --staged --quiet; then
            echo "⚠️ 変更なし - コミットをスキップ"
          else
            # ブランチ名を生成（タイムスタンプ付き）
            TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
            BRANCH_NAME="translation/results-${TIMESTAMP}"
            
            echo "🌿 新しいブランチを作成: ${BRANCH_NAME}"
            git checkout -b "${BRANCH_NAME}"
            
            ITEMS=$(jq -r '.items // 0' results/token-summary.json)
            TOTAL=$(jq -r '.total_items // 0' results/token-summary.json)
            
            git commit -m "chore(translation): docstring/コメントを翻訳 + ソースコード全体" \
              -m "Translated: ${ITEMS} items (Total extracted: ${TOTAL})" \
              -m "Includes: translated files + unchanged files (full clone)" \
              -m "Timestamp: ${TIMESTAMP}"
            
            echo "🚀 ブランチ ${BRANCH_NAME} をリモートにプッシュ中..."
            git push -u origin "${BRANCH_NAME}"
            echo "✅ 翻訳結果を新しいブランチ ${BRANCH_NAME} にpushしました"
            echo "📋 プルリクエストを作成してください: https://github.com/${{ github.repository }}/compare/${BRANCH_NAME}"
          fi
