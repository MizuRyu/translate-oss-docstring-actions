name: Translate Repository Content (Production)

on:
  workflow_dispatch:
    inputs:
      repository_url:
        description: "翻訳対象のリポジトリ URL"
        required: true
        default: "https://github.com/microsoft/agent-framework"
        type: string
      subdirectory:
        description: "対象がモノレポの場合のサブディレクトリパス"
        required: false
        default: "python"
        type: string
      translation_limit:
        description: "翻訳件数の上限 (0で無制限)"
        required: false
        default: 10
        type: number
      mock_mode:
        description: "モックモードで実行（LLM呼び出しをスキップ）"
        required: false
        default: false
        type: boolean
      include_log_messages:
        description: "logger/printも抽出対象に含める"
        required: false
        default: false
        type: boolean
      exclude_terms:
        description: "和訳から除外する単語群（自然言語で指定）"
        required: false
        default: ""
        type: string
      batch_size:
        description: "翻訳時のバッチサイズ"
        required: false
        default: 5
        type: number
      push_results:
        description: "翻訳結果をリポジトリにpushする"
        required: false
        default: true
        type: boolean

jobs:
  prepare:
    name: Extract And Summarize
    runs-on: ubuntu-latest
    outputs:
      token-summary: ${{ steps.summary.outputs.json }}
    steps:
      - name: Checkout comment-translator repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: uv sync --frozen

      - name: Clone target repository
        run: |
          git clone --depth 1 "${{ inputs.repository_url }}" target-repo
          if [ -n "${{ inputs.subdirectory }}" ]; then
            case "${{ inputs.subdirectory }}" in
              /*|*../*)
                echo "Invalid subdirectory: ${{ inputs.subdirectory }}" >&2
                exit 1
                ;;
            esac
          fi

      - name: Extract docstrings and comments
        run: |
          mkdir -p out
          ARGS=""
          if [[ "${{ inputs.include_log_messages }}" == 'true' ]]; then
            ARGS="${ARGS} --include-log-messages"
          fi
          uv run python main.py extract target-repo/${{ inputs.subdirectory }} \
            --output out/extracted.jsonl \
            $ARGS \
            --log-level INFO

      - name: Summarize token usage
        id: summary
        run: |
          uv run python scripts/summarize_tokens.py \
            --input out/extracted.jsonl \
            --output out/token-summary.json

          # GitHub Outputに保存（JSONを1行に圧縮）
          SUMMARY=$(jq -c '.' out/token-summary.json)
          echo "json=$SUMMARY" >> "$GITHUB_OUTPUT"

          # Step Summaryに詳細表示
          ITEMS=$(jq '.items // (.items | length?)' out/token-summary.json)
          TOKENS=$(jq '.tokens' out/token-summary.json)
          AVG_TOKENS=$(jq '.average_tokens' out/token-summary.json)
          MAX_TOKENS=$(jq '.max_tokens // 0' out/token-summary.json)
          MIN_TOKENS=$(jq '.min_tokens // 0' out/token-summary.json)

          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          ## 📊 トークン使用量サマリ

          | 項目 | 値 |
          |------|------|
          | 抽出件数 | **${ITEMS}件** |
          | 総トークン数 | **${TOKENS}** |
          | 平均トークン数 | **${AVG_TOKENS}** |
          | 最大トークン数 | ${MAX_TOKENS} |
          | 最小トークン数 | ${MIN_TOKENS} |

          > ⚠️ 次のステップで翻訳を実行します。承認が必要です。
          EOF

          # コンソールにも表示
          echo "============================================"
          echo "📊 トークン使用量サマリ"
          echo "============================================"
          echo "抽出件数: ${ITEMS}件"
          echo "総トークン数: ${TOKENS}"
          echo "平均トークン数: ${AVG_TOKENS}"
          echo "最大トークン数: ${MAX_TOKENS}"
          echo "最小トークン数: ${MIN_TOKENS}"
          echo "============================================"

      - name: Upload extraction artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prepare-artifacts
          path: |
            out/extracted.jsonl
            out/token-summary.json
            run.log

  translate:
    name: Translate And Apply
    runs-on: ubuntu-latest
    needs: prepare
    environment: translation-approval
    steps:
      - name: Checkout comment-translator repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: uv sync --frozen

      - name: Clone target repository
        run: |
          git clone --depth 1 "${{ inputs.repository_url }}" target-repo

      - name: Download extraction artifact
        uses: actions/download-artifact@v4
        with:
          name: prepare-artifacts
          path: .

      - name: Show token summary
        run: |
          echo "============================================"
          echo "📊 翻訳前のトークン確認"
          echo "============================================"
          cat out/token-summary.json | jq -r '
            "抽出件数: \(.items // (.items | length?))件",
            "総トークン数: \(.tokens)",
            "平均トークン数: \(.average_tokens)",
            "最大トークン数: \(.max_tokens // 0)",
            "最小トークン数: \(.min_tokens // 0)"
          '
          echo "============================================"
          echo ""
          echo "⚠️  このジョブは environment: translation-approval で保護されています"
          echo "⚠️  翻訳を実行するには GitHub UI で承認が必要です"
          echo ""

      - name: Run translation
        run: |
          mkdir -p out
          TRANSLATE_ARGS=("--batch-size" "${{ inputs.batch_size }}")
          if [ "${{ inputs.translation_limit }}" != "0" ]; then
              TRANSLATE_ARGS+=("--limit" "${{ inputs.translation_limit }}")
          fi
          if [ -n "${{ inputs.exclude_terms }}" ]; then
              TRANSLATE_ARGS+=("--exclude-terms" "${{ inputs.exclude_terms }}")
          fi
          if [[ "${{ inputs.mock_mode }}" == 'true' ]]; then
              TRANSLATE_ARGS+=("--mock")
          fi
          uv run python main.py translate out/extracted.jsonl \
            --output out/translated.jsonl \
            --failed-output out/unprocessed.jsonl \
            "${TRANSLATE_ARGS[@]}" \
            --log-level INFO

      - name: Apply translated content
        run: |
          uv run python main.py replace out/translated.jsonl \
            --output-dir out/translated_sources \
            --root target-repo/${{ inputs.subdirectory }} \
            --mode indirect \
            --log-level INFO
          if [ -d out/translated_sources ]; then
            rsync -av --ignore-existing out/translated_sources/ target-repo/${{ inputs.subdirectory }}/
          fi

      - name: Collect artifacts
        run: |
          mkdir -p translated
          cp out/extracted.jsonl translated/
          cp out/translated.jsonl translated/
          cp out/unprocessed.jsonl translated/
          cp out/token-summary.json translated/
          cp -R out/translated_sources translated/
          [ -f run.log ] && cp run.log translated/ || true
          echo "Artifacts saved to: translated"
          ls -R translated

      - name: Commit and push results (GitHub only)
        if: ${{ !env.ACT && inputs.push_results }}
        run: |
          # Git設定
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # 翻訳結果をコミット
          git add translated

          # 変更があればコミット
          if git diff --staged --quiet; then
            echo "変更なし - コミットをスキップ"
          else
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            ITEMS=$(jq '.items // (.items | length?)' translated/token-summary.json)
            git commit -m "chore(translation): 翻訳結果を追加" \
              -m "Repository: ${{ inputs.repository_url }}" \
              -m "Subdirectory: ${{ inputs.subdirectory }}" \
              -m "Translated items: ${ITEMS}" \
              -m "Timestamp: ${TIMESTAMP}"
            git push
            echo "✅ 翻訳結果をリポジトリにpushしました"
          fi

      - name: Upload translation artifacts
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: translation-results
          path: translated
